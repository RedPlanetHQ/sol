// .electron-vendors.cache.json
var chrome = "128";

// packages/preload/vite.config.js
import { preload } from "file:///Users/harshithmullapudi/Documents/sigma/node_modules/.pnpm/unplugin-auto-expose@0.3.0_rollup@4.24.0/node_modules/unplugin-auto-expose/dist/index.js";
import { join } from "node:path";
var __vite_injected_original_dirname = "/Users/harshithmullapudi/Documents/sigma/apps/electron/packages/preload";
var PACKAGE_ROOT = __vite_injected_original_dirname;
var PROJECT_ROOT = join(PACKAGE_ROOT, "../..");
var config = {
  mode: process.env.MODE,
  root: PACKAGE_ROOT,
  envDir: PROJECT_ROOT,
  build: {
    ssr: true,
    sourcemap: "inline",
    target: `chrome${chrome}`,
    outDir: "dist",
    assetsDir: ".",
    minify: process.env.MODE !== "development",
    lib: {
      entry: "src/index.ts",
      formats: ["es"]
    },
    rollupOptions: {
      output: {
        // ESM preload scripts must have the .mjs extension
        // https://www.electronjs.org/docs/latest/tutorial/esm#esm-preload-scripts-must-have-the-mjs-extension
        entryFileNames: "[name].mjs"
      }
    },
    emptyOutDir: true,
    reportCompressedSize: false
  },
  plugins: [preload.vite()]
};
var vite_config_default = config;
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLmVsZWN0cm9uLXZlbmRvcnMuY2FjaGUuanNvbiIsICJwYWNrYWdlcy9wcmVsb2FkL3ZpdGUuY29uZmlnLmpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJ7XCJjaHJvbWVcIjpcIjEyOFwiLFwibm9kZVwiOlwiMjBcIn0iLCAiY29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUgPSBcIi9Vc2Vycy9oYXJzaGl0aG11bGxhcHVkaS9Eb2N1bWVudHMvc2lnbWEvYXBwcy9lbGVjdHJvbi9wYWNrYWdlcy9wcmVsb2FkXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvVXNlcnMvaGFyc2hpdGhtdWxsYXB1ZGkvRG9jdW1lbnRzL3NpZ21hL2FwcHMvZWxlY3Ryb24vcGFja2FnZXMvcHJlbG9hZC92aXRlLmNvbmZpZy5qc1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vVXNlcnMvaGFyc2hpdGhtdWxsYXB1ZGkvRG9jdW1lbnRzL3NpZ21hL2FwcHMvZWxlY3Ryb24vcGFja2FnZXMvcHJlbG9hZC92aXRlLmNvbmZpZy5qc1wiO2ltcG9ydCB7Y2hyb21lfSBmcm9tICcuLi8uLi8uZWxlY3Ryb24tdmVuZG9ycy5jYWNoZS5qc29uJztcbmltcG9ydCB7cHJlbG9hZH0gZnJvbSAndW5wbHVnaW4tYXV0by1leHBvc2UnO1xuaW1wb3J0IHtqb2lufSBmcm9tICdub2RlOnBhdGgnO1xuXG5jb25zdCBQQUNLQUdFX1JPT1QgPSBfX2Rpcm5hbWU7XG5jb25zdCBQUk9KRUNUX1JPT1QgPSBqb2luKFBBQ0tBR0VfUk9PVCwgJy4uLy4uJyk7XG5cbi8qKlxuICogQHR5cGUge2ltcG9ydCgndml0ZScpLlVzZXJDb25maWd9XG4gKiBAc2VlIGh0dHBzOi8vdml0ZWpzLmRldi9jb25maWcvXG4gKi9cbmNvbnN0IGNvbmZpZyA9IHtcbiAgbW9kZTogcHJvY2Vzcy5lbnYuTU9ERSxcbiAgcm9vdDogUEFDS0FHRV9ST09ULFxuICBlbnZEaXI6IFBST0pFQ1RfUk9PVCxcbiAgYnVpbGQ6IHtcbiAgICBzc3I6IHRydWUsXG4gICAgc291cmNlbWFwOiAnaW5saW5lJyxcbiAgICB0YXJnZXQ6IGBjaHJvbWUke2Nocm9tZX1gLFxuICAgIG91dERpcjogJ2Rpc3QnLFxuICAgIGFzc2V0c0RpcjogJy4nLFxuICAgIG1pbmlmeTogcHJvY2Vzcy5lbnYuTU9ERSAhPT0gJ2RldmVsb3BtZW50JyxcbiAgICBsaWI6IHtcbiAgICAgIGVudHJ5OiAnc3JjL2luZGV4LnRzJyxcbiAgICAgIGZvcm1hdHM6IFsnZXMnXSxcbiAgICB9LFxuICAgIHJvbGx1cE9wdGlvbnM6IHtcbiAgICAgIG91dHB1dDoge1xuICAgICAgICAvLyBFU00gcHJlbG9hZCBzY3JpcHRzIG11c3QgaGF2ZSB0aGUgLm1qcyBleHRlbnNpb25cbiAgICAgICAgLy8gaHR0cHM6Ly93d3cuZWxlY3Ryb25qcy5vcmcvZG9jcy9sYXRlc3QvdHV0b3JpYWwvZXNtI2VzbS1wcmVsb2FkLXNjcmlwdHMtbXVzdC1oYXZlLXRoZS1tanMtZXh0ZW5zaW9uXG4gICAgICAgIGVudHJ5RmlsZU5hbWVzOiAnW25hbWVdLm1qcycsXG4gICAgICB9LFxuICAgIH0sXG4gICAgZW1wdHlPdXREaXI6IHRydWUsXG4gICAgcmVwb3J0Q29tcHJlc3NlZFNpemU6IGZhbHNlLFxuICB9LFxuXG4gIHBsdWdpbnM6IFtwcmVsb2FkLnZpdGUoKV0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb25maWc7XG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQUMsYUFBUzs7O0FDQ1YsU0FBUSxlQUFjO0FBQ3RCLFNBQVEsWUFBVztBQUZuQixJQUFNLG1DQUFtQztBQUl6QyxJQUFNLGVBQWU7QUFDckIsSUFBTSxlQUFlLEtBQUssY0FBYyxPQUFPO0FBTS9DLElBQU0sU0FBUztBQUFBLEVBQ2IsTUFBTSxRQUFRLElBQUk7QUFBQSxFQUNsQixNQUFNO0FBQUEsRUFDTixRQUFRO0FBQUEsRUFDUixPQUFPO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxXQUFXO0FBQUEsSUFDWCxRQUFRLFNBQVMsTUFBTTtBQUFBLElBQ3ZCLFFBQVE7QUFBQSxJQUNSLFdBQVc7QUFBQSxJQUNYLFFBQVEsUUFBUSxJQUFJLFNBQVM7QUFBQSxJQUM3QixLQUFLO0FBQUEsTUFDSCxPQUFPO0FBQUEsTUFDUCxTQUFTLENBQUMsSUFBSTtBQUFBLElBQ2hCO0FBQUEsSUFDQSxlQUFlO0FBQUEsTUFDYixRQUFRO0FBQUE7QUFBQTtBQUFBLFFBR04sZ0JBQWdCO0FBQUEsTUFDbEI7QUFBQSxJQUNGO0FBQUEsSUFDQSxhQUFhO0FBQUEsSUFDYixzQkFBc0I7QUFBQSxFQUN4QjtBQUFBLEVBRUEsU0FBUyxDQUFDLFFBQVEsS0FBSyxDQUFDO0FBQzFCO0FBRUEsSUFBTyxzQkFBUTsiLAogICJuYW1lcyI6IFtdCn0K
