datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

model Activity {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  type      String
  eventData Json
  name      String

  integrationAccount   IntegrationAccount? @relation(fields: [integrationAccountId], references: [id])
  integrationAccountId String?

  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
}

model Attachment {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  fileName       String?
  originalName   String
  fileType       String
  fileExt        String
  size           Int
  url            String?
  status         AttachmentStatus
  sourceMetadata Json?

  uploadedBy   User?      @relation(fields: [uploadedById], references: [id])
  uploadedById String?
  workspace    Workspace? @relation(fields: [workspaceId], references: [id])
  workspaceId  String?
}

// Used to authenticate users from cli
model AuthorizationCode {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  personalAccessTokenId String?
  workspaceId           String?
  code                  String
}

model Conversation {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  title       String?
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  workspace   Workspace? @relation(fields: [workspaceId], references: [id])
  workspaceId String?

  ConversationHistory ConversationHistory[]
}

model ConversationHistory {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  message  String
  userType UserType

  context Json?

  thoughts Json?
  user     User?   @relation(fields: [userId], references: [id])
  userId   String?

  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
}

model IndexJob {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  type     String
  status   String
  sourceId String
  metadata Json?

  integrationAccount   IntegrationAccount @relation(fields: [integrationAccountId], references: [id])
  integrationAccountId String

  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
}

model IntegrationAccount {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  integrationConfiguration Json
  accountId                String?
  settings                 Json?
  isActive                 Boolean @default(true)

  integratedBy            User                    @relation(references: [id], fields: [integratedById])
  integratedById          String
  integrationDefinition   IntegrationDefinitionV2 @relation(references: [id], fields: [integrationDefinitionId])
  integrationDefinitionId String
  workspace               Workspace               @relation(references: [id], fields: [workspaceId])
  workspaceId             String
  Activity                Activity[]
  IndexJob                IndexJob[]
  task                    Task[]

  @@unique([accountId, integrationDefinitionId, workspaceId])
}

model IntegrationDefinitionV2 {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  name        String  @unique
  slug        String
  description String
  icon        String
  config      Json?
  version     String?
  url         String?

  workspace   Workspace? @relation(references: [id], fields: [workspaceId])
  workspaceId String?

  IntegrationAccount IntegrationAccount[]
}

model Page {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?
  archived  DateTime?

  title String?

  description       String?
  descriptionBinary Bytes?

  sortOrder String // LexoRank value for order
  parentId  String? // Self-referencing: Points to another page (folder)
  parent    Page?   @relation("ParentChild", fields: [parentId], references: [id])
  children  Page[]  @relation("ParentChild")

  tags String[]

  type PageType @default(Default)

  statusId String? // Status
  status   Status? @relation(fields: [statusId], references: [id])

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  task        Task[]
}

model PersonalAccessToken {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  name  String
  jwt   String
  token String

  user        User   @relation(fields: [userId], references: [id])
  userId      String
  type        String @default("user")
  workspaceId String

  @@unique([name, userId, token])
}

model Status {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  name        String
  description String?
  position    Int
  color       String

  workspace   Workspace? @relation(fields: [workspaceId], references: [id])
  workspaceId String

  pages Page[]

  @@unique([name, workspaceId], map: "_ci")
}

model SyncAction {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  modelName  ModelName
  modelId    String
  action     ActionType
  sequenceId BigInt

  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String

  @@unique([modelId, action])
}

model Task {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  number      Int?
  completedAt DateTime?

  sourceId String?
  url      String?
  status   String?
  metadata Json    @default("{}")

  // Added calendar event fields
  startTime      DateTime?
  endTime        DateTime?
  recurrence     String[]
  recurrenceText String?

  page   Page   @relation(fields: [pageId], references: [id])
  pageId String

  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String

  integrationAccountId String?
  integrationAccount   IntegrationAccount? @relation(fields: [integrationAccountId], references: [id])
}

model Template {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  name         String
  templateData Json

  createdBy   User      @relation(fields: [createdById], references: [id])
  createdById String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
}

model User {
  id String @id @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique

  fullname                String?
  username                String
  initialSetupComplete    Boolean @default(false)
  anonymousDataCollection Boolean @default(false)

  workspace Workspace?

  image String?

  template            Template[]
  integrationAccount  IntegrationAccount[]
  attachment          Attachment[]
  personalAccessToken PersonalAccessToken[]
  Conversation        Conversation[]
  ConversationHistory ConversationHistory[]
}

model Workspace {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  name String
  slug String  @unique
  icon String?

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  actionsEnabled Boolean @default(true)
  preferences    Json?

  template              Template[]
  syncAction            SyncAction[]
  integrationAccount    IntegrationAccount[]
  integrationDefinition IntegrationDefinitionV2[]
  attachments           Attachment[]
  pages                 Page[]
  statuses              Status[]
  Conversation          Conversation[]
  Activity              Activity[]
  IndexJob              IndexJob[]
  tasks                 Task[]
}

enum ModelName {
  Attachment
  IntegrationAccount
  IntegrationDefinitionV2
  Task
  SyncAction
  User
  Workspace
  Page
  Status
  Activity
  Conversation
  ConversationHistory
}

enum ActionType {
  I
  U
  D
}

enum AttachmentStatus {
  Pending
  Failed
  Uploaded
  Deleted
  External
}

enum PageType {
  Daily
  Default
}

enum UserType {
  Agent
  User
  System
}
