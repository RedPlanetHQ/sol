datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

model Activity {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  text      String
  // Used to link the task or activity to external apps
  sourceURL String?

  integrationAccount   IntegrationAccount? @relation(fields: [integrationAccountId], references: [id])
  integrationAccountId String?

  task   Task?   @relation(fields: [taskId], references: [id])
  taskId String?

  rejectionReason String?

  workspace           Workspace             @relation(fields: [workspaceId], references: [id])
  workspaceId         String
  ConversationHistory ConversationHistory[]
}

model AuthSession {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  ipAddress String?
  userAgent String?

  @@map("session")
}

model AuthAccount {
  id           String    @id @default(uuid())
  userId       String
  accountId    String
  providerId   String
  accessToken  String?
  refreshToken String?
  idToken      String?
  expiresAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  @@unique([userId, providerId])
  @@map("account")
}

model AuthVerification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String?

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verification")
}

model Command {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  command     String
  description String

  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
}

model AgentWorklog {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  modelName String
  modelId   String
  state     String
  type      String

  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
}

model Attachment {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  fileName       String?
  originalName   String
  fileType       String
  fileExt        String
  size           Int
  url            String?
  status         AttachmentStatus
  sourceMetadata Json?

  uploadedBy   User?      @relation(fields: [uploadedById], references: [id])
  uploadedById String?
  workspace    Workspace? @relation(fields: [workspaceId], references: [id])
  workspaceId  String?
}

// Used to authenticate users from cli

model AuthorizationCode {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  personalAccessTokenId String?
  workspaceId           String?
  code                  String
}

model Automation {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  title                 String?
  text                  String
  usedCount             Int      @default(0)
  integrationAccountIds String[]
  mcps                  String[]

  workspaceId String
}

model Conversation {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  unread Boolean @default(false)

  title  String?
  user   User    @relation(fields: [userId], references: [id])
  userId String

  workspace   Workspace? @relation(fields: [workspaceId], references: [id])
  workspaceId String?

  page   Page?   @relation(fields: [pageId], references: [id])
  pageId String?
  task   Task?   @relation(fields: [taskId], references: [id])
  taskId String?

  status String @default("pending") // Can be "pending", "running", "completed", "failed", "need_attension"

  ConversationHistory ConversationHistory[]
}

model ConversationHistory {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  message  String
  userType UserType

  activity   Activity? @relation(fields: [activityId], references: [id])
  activityId String?

  context Json?

  thoughts Json?
  user     User?   @relation(fields: [userId], references: [id])
  userId   String?

  conversation              Conversation                @relation(fields: [conversationId], references: [id])
  conversationId            String
  ConversationExecutionStep ConversationExecutionStep[]
}

model ConversationExecutionStep {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  thought String
  message String

  actionId     String?
  actionOutput String?
  actionInput  String?
  actionStatus String?

  metadata Json? @default("{}")

  conversationHistory   ConversationHistory @relation(fields: [conversationHistoryId], references: [id])
  conversationHistoryId String
}

model IntegrationAccount {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  integrationConfiguration Json
  accountId                String?
  settings                 Json?
  isActive                 Boolean @default(true)

  integratedBy            User                    @relation(references: [id], fields: [integratedById])
  integratedById          String
  integrationDefinition   IntegrationDefinitionV2 @relation(references: [id], fields: [integrationDefinitionId])
  integrationDefinitionId String
  workspace               Workspace               @relation(references: [id], fields: [workspaceId])
  workspaceId             String
  Activity                Activity[]
  Task                    Task[]
  automationId            String?

  @@unique([accountId, integrationDefinitionId, workspaceId])
}

model IntegrationDefinitionV2 {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  name        String  @unique
  slug        String
  description String
  icon        String
  config      Json?
  spec        Json    @default("{}")
  version     String?
  url         String?

  workspace   Workspace? @relation(references: [id], fields: [workspaceId])
  workspaceId String?

  IntegrationAccount IntegrationAccount[]
}

model InvitationCode {
  id   String @id @default(cuid())
  code String @unique

  users User[]

  createdAt DateTime @default(now())
}

model List {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  updatedBy String @default("user")

  favourite Boolean @default(false)

  icon String?

  page   Page   @relation(fields: [pageId], references: [id])
  pageId String

  workspace   Workspace? @relation(references: [id], fields: [workspaceId])
  workspaceId String?

  Task Task[]
}

model Page {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?
  archived  DateTime?

  title String?

  description       String?
  descriptionBinary Bytes?

  sortOrder String // LexoRank value for order
  parentId  String? // Self-referencing: Points to another page (folder)
  parent    Page?   @relation("ParentChild", fields: [parentId], references: [id])
  children  Page[]  @relation("ParentChild")

  outlinks Json?    @default("[]")
  tags     String[]

  type PageType @default(Default)

  workspaceId  String
  workspace    Workspace      @relation(fields: [workspaceId], references: [id])
  task         Task[]
  conversation Conversation[]
  List         List[]
}

model PersonalAccessToken {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  name  String
  jwt   String?
  token String

  user        User   @relation(fields: [userId], references: [id])
  userId      String
  type        String @default("user")
  workspaceId String

  @@unique([name, userId, token])
}

model SyncAction {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  modelName  ModelName
  modelId    String
  action     ActionType
  sequenceId BigInt

  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String

  @@unique([modelId, action])
}

model Task {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?
  archived  DateTime?

  updatedBy String @default("user")

  number      Int?
  completedAt DateTime?

  status   String?
  metadata Json    @default("{}")

  // This is used in recurring tasks
  startTime    DateTime?
  endTime      DateTime?
  recurrence   String[]
  scheduleText String?

  dueDate  DateTime?
  remindAt DateTime?
  tags     String[]

  source Json?

  page   Page   @relation(fields: [pageId], references: [id])
  pageId String

  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String

  list   List?   @relation(fields: [listId], references: [id])
  listId String?

  // Very big mistake 
  parent   Task?   @relation("SubIssue", fields: [parentId], references: [id])
  parentId String?
  subIssue Task[]  @relation("SubIssue")

  integrationAccount   IntegrationAccount? @relation(fields: [integrationAccountId], references: [id])
  integrationAccountId String?

  taskOccurrence TaskOccurrence[]
  conversation   Conversation[]
  Activity       Activity[]
}

model TaskOccurrence {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  startTime DateTime?
  endTime   DateTime?
  status    String?

  metadata Json? @default("{}")

  task   Task   @relation(fields: [taskId], references: [id])
  taskId String

  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
}

model User {
  id String @id @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique

  name                    String? // Better Auth expects 'name' field
  fullname                String?
  username                String
  emailVerified           Boolean @default(true) // Better Auth expects this
  initialSetupComplete    Boolean @default(false)
  anonymousDataCollection Boolean @default(false)

  workspace Workspace?

  image       String?
  preferences Json?
  mcp         Json?

  integrationAccount  IntegrationAccount[]
  attachment          Attachment[]
  personalAccessToken PersonalAccessToken[]
  Conversation        Conversation[]
  ConversationHistory ConversationHistory[]
  UserUsage           UserUsage?
  InvitationCode      InvitationCode?       @relation(fields: [invitationCodeId], references: [id])
  invitationCodeId    String?
  UserCodingSession   UserCodingSession[]

  // Better Auth relationships
  authSessions      AuthSession[]
  authAccounts      AuthAccount[]
  authVerifications AuthVerification[]
  apikeys           Apikey[]
}

model UserCodingSession {
  id        String   @id @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessionId     String
  sessionStatus String

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model UserUsage {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  availableCredits Int @default(0)
  usedCredits      Int @default(0)

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Workspace {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  name String
  slug String  @unique
  icon String?

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  actionsEnabled Boolean @default(true)
  preferences    Json?

  syncAction            SyncAction[]
  integrationAccount    IntegrationAccount[]
  integrationDefinition IntegrationDefinitionV2[]
  attachments           Attachment[]
  pages                 Page[]
  Conversation          Conversation[]
  tasks                 Task[]
  taskOccurrence        TaskOccurrence[]
  List                  List[]
  agentWorklog          AgentWorklog[]
  Activity              Activity[]
  Command               Command[]
}

enum ModelName {
  Activity
  AgentWorklog
  Automation
  Attachment
  Command
  Conversation
  ConversationHistory
  IntegrationAccount
  IntegrationDefinitionV2
  List
  Page
  SyncAction
  Task
  TaskOccurrence
  User
  Workspace
}

enum ActionType {
  I
  U
  D
}

enum AttachmentStatus {
  Pending
  Failed
  Uploaded
  Deleted
  External
}

enum PageType {
  Daily // deprecated
  List
  Default
  Context
}

enum UserType {
  Agent
  User
  System
}

model Apikey {
  id                  String    @id
  name                String?
  start               String?
  prefix              String?
  key                 String
  userId              String
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  refillInterval      Int?
  refillAmount        Int?
  lastRefillAt        DateTime?
  enabled             Boolean?
  rateLimitEnabled    Boolean?
  rateLimitTimeWindow Int?
  rateLimitMax        Int?
  requestCount        Int?
  remaining           Int?
  lastRequest         DateTime?
  expiresAt           DateTime?
  createdAt           DateTime
  updatedAt           DateTime
  permissions         String?
  metadata            String?

  @@map("apikey")
}
